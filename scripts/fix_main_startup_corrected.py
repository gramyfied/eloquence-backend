#!/usr/bin/env python3
"""
Script pour corriger la fonction startup_event dans main.py
"""

import os

# Fichier √† modifier
MAIN_PY_PATH = "/home/ubuntu/eloquence_backend_py/app/main.py"

def fix_main_py():
    """
    Modifie la fonction startup_event dans main.py pour √©viter l'initialisation
    de l'orchestrateur avec une session de base de donn√©es
    """
    print("üîß Modification de la fonction startup_event dans main.py...")
    
    with open(MAIN_PY_PATH, 'r') as file:
        content = file.read()
    
    # Remplacer la fonction init_orchestrator_background
    old_init_orchestrator = """    # Initialiser l'orchestrateur en arri√®re-plan pour ne pas bloquer le d√©marrage
    async def init_orchestrator_background():
        try:
            if AsyncSessionLocal:
                async with AsyncSessionLocal() as db:
                    orchestrator = await get_orchestrator(db)
                    logger.info("Orchestrateur initialis√© avec succ√®s")
            else:
                logger.error("Impossible d'initialiser l'Orchestrateur: Session DB non disponible.")
        except Exception as e:
            logger.error(f"Erreur lors de l'initialisation de l'orchestrateur: {e}", exc_info=True)

    # Lancer l'initialisation en arri√®re-plan
    asyncio.create_task(init_orchestrator_background())
    logger.info("Initialisation de l'orchestrateur lanc√©e en arri√®re-plan")"""
    
    new_init_orchestrator = """    # Mode sans base de donn√©es: initialisation simplifi√©e de l'orchestrateur
    logger.warning("‚ö†Ô∏è Mode sans base de donn√©es: initialisation simplifi√©e de l'orchestrateur")
    try:
        # Cr√©er un orchestrateur sans session de base de donn√©es
        from services.orchestrator import Orchestrator
        orchestrator = Orchestrator()
        # Stocker l'orchestrateur dans le module websocket
        from app.routes.websocket import set_orchestrator
        set_orchestrator(orchestrator)
        logger.info("‚úÖ Orchestrateur initialis√© en mode sans base de donn√©es")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation de l'orchestrateur: {e}", exc_info=True)"""
    
    # Remplacer la fonction create_tables
    old_create_tables = """# Cr√©ation des tables dans la base de donn√©es
async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)"""
    
    new_create_tables = """# Cr√©ation des tables dans la base de donn√©es (d√©sactiv√©e en mode sans base de donn√©es)
async def create_tables():
    logger.warning("‚ö†Ô∏è Mode sans base de donn√©es: cr√©ation des tables d√©sactiv√©e")
    pass"""
    
    # Remplacer l'appel √† create_tables dans startup_event
    old_create_tables_call = """    # Cr√©er les tables dans la base de donn√©es
    await create_tables()"""
    
    new_create_tables_call = """    # Mode sans base de donn√©es: pas de cr√©ation de tables
    logger.warning("‚ö†Ô∏è Mode sans base de donn√©es: pas de cr√©ation de tables")"""
    
    # Effectuer les remplacements
    content = content.replace(old_init_orchestrator, new_init_orchestrator)
    content = content.replace(old_create_tables, new_create_tables)
    content = content.replace(old_create_tables_call, new_create_tables_call)
    
    # √âcrire le contenu modifi√©
    with open(MAIN_PY_PATH, 'w') as file:
        file.write(content)
    
    print("‚úÖ Fonction startup_event modifi√©e avec succ√®s.")
    return True

# Ajouter la fonction set_orchestrator dans websocket.py
def add_set_orchestrator():
    """
    Ajoute la fonction set_orchestrator dans websocket.py
    """
    print("üîß Ajout de la fonction set_orchestrator dans websocket.py...")
    
    websocket_py_path = "/home/ubuntu/eloquence_backend_py/app/routes/websocket.py"
    
    with open(websocket_py_path, 'r') as file:
        content = file.read()
    
    # V√©rifier si la fonction existe d√©j√†
    if "def set_orchestrator(" in content:
        print("‚úÖ La fonction set_orchestrator existe d√©j√†.")
        return True
    
    # Ajouter la fonction set_orchestrator et la variable globale
    add_after_imports = """
# Variable globale pour stocker l'orchestrateur en mode sans base de donn√©es
_orchestrator_instance = None

def set_orchestrator(orchestrator):
    # D√©finit l'instance globale de l'orchestrateur pour le mode sans base de donn√©es
    global _orchestrator_instance
    _orchestrator_instance = orchestrator
    return orchestrator

"""
    
    # Effectuer les remplacements
    if "# Variable globale pour stocker l'orchestrateur" not in content:
        # Trouver la position apr√®s les imports
        import_end = content.find("_orchestrator_instance = None")
        if import_end == -1:
            # Si on ne trouve pas la variable globale, on la cherche apr√®s les imports
            import_end = content.find("import")
            import_end = content.find("\n", import_end)
            content = content[:import_end+1] + add_after_imports + content[import_end+1:]
    
    # √âcrire le contenu modifi√©
    with open(websocket_py_path, 'w') as file:
        file.write(content)
    
    print("‚úÖ Fonction set_orchestrator ajout√©e avec succ√®s.")
    return True

if __name__ == "__main__":
    add_set_orchestrator()
    fix_main_py()
    print("üîÑ Red√©marrez le service pour appliquer les modifications.")
