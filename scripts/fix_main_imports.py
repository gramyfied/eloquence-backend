#!/usr/bin/env python3
"""
Script pour corriger les imports dans main.py
"""

import os

# Fichier √† modifier
MAIN_PY_PATH = "/home/ubuntu/eloquence_backend_py/app/main.py"

def fix_main_imports():
    """
    Modifie les imports dans main.py pour √©viter les erreurs de connexion √† la base de donn√©es
    """
    print("üîß Modification des imports dans main.py...")
    
    with open(MAIN_PY_PATH, 'r') as file:
        content = file.read()
    
    # Remplacer l'import de database
    old_import = """from core.config import settings
from core.database import engine, get_db, AsyncSessionLocal # Importer AsyncSessionLocal
from core.models import Base"""
    
    new_import = """from core.config import settings
# Imports de database d√©sactiv√©s en mode sans base de donn√©es
# from core.database import engine, get_db, AsyncSessionLocal
# from core.models import Base"""
    
    # Remplacer les imports dans les routes
    old_routes_import = """from app.routes import api_router"""
    
    new_routes_import = """# Import des routes avec gestion des erreurs potentielles
try:
    from app.routes import api_router
except ImportError as e:
    import logging
    logging.error(f"Erreur lors de l'import des routes: {e}")
    # Cr√©er un router vide en cas d'erreur
    from fastapi import APIRouter
    api_router = APIRouter()"""
    
    # Effectuer les remplacements
    content = content.replace(old_import, new_import)
    content = content.replace(old_routes_import, new_routes_import)
    
    # √âcrire le contenu modifi√©
    with open(MAIN_PY_PATH, 'w') as file:
        file.write(content)
    
    print("‚úÖ Imports dans main.py modifi√©s avec succ√®s.")
    return True

# Cr√©er un fichier main.py simplifi√© pour le mode sans base de donn√©es
def create_simplified_main():
    """
    Cr√©e un fichier main.py simplifi√© pour le mode sans base de donn√©es
    """
    print("üîß Cr√©ation d'un fichier main.py simplifi√©...")
    
    simplified_main = """
\"\"\"
Point d'entr√©e principal de l'application Eloquence Backend (mode sans base de donn√©es).
\"\"\"

import logging
import os
from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, HTMLResponse

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
    ]
)

logger = logging.getLogger(__name__)

# Initialisation de l'application FastAPI
app = FastAPI(
    title="Eloquence Backend API (Mode Sans Base de Donn√©es)",
    description="API pour le syst√®me de coaching vocal Eloquence - Mode de diagnostic sans base de donn√©es",
    version="1.0.0",
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# √âv√©nements de d√©marrage et d'arr√™t
@app.on_event("startup")
async def startup_event():
    \"\"\"
    √âv√©nement ex√©cut√© au d√©marrage de l'application.
    \"\"\"
    logger.info("D√©marrage de l'application Eloquence Backend en mode sans base de donn√©es")
    logger.warning("‚ö†Ô∏è Mode sans base de donn√©es activ√© - Fonctionnalit√©s limit√©es")

@app.on_event("shutdown")
async def shutdown_event():
    \"\"\"
    √âv√©nement ex√©cut√© √† l'arr√™t de l'application.
    \"\"\"
    logger.info("Arr√™t de l'application Eloquence Backend")

# Route de sant√©
@app.get("/health")
async def health_check():
    \"\"\"
    V√©rifie l'√©tat de sant√© de l'application.
    \"\"\"
    return {"status": "ok", "version": "1.0.0", "mode": "sans base de donn√©es"}

# Route racine
@app.get("/")
async def root():
    \"\"\"
    Route racine de l'API.
    \"\"\"
    html_content = \"\"\"
    <html>
        <head>
            <title>Backend Test Server</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    line-height: 1.6;
                }
                h1 {
                    color: #4CAF50;
                }
                .warning {
                    background-color: #fff3cd;
                    color: #856404;
                    padding: 10px;
                    border-radius: 5px;
                    margin: 20px 0;
                }
                .endpoints {
                    background-color: #f8f9fa;
                    padding: 15px;
                    border-radius: 5px;
                }
            </style>
        </head>
        <body>
            <h1>Backend Test Server</h1>
            <p>If you can see this, your connection is working!</p>
            
            <div class="warning">
                <strong>Mode sans base de donn√©es activ√©</strong>
                <p>Le serveur fonctionne en mode diagnostic sans connexion √† la base de donn√©es.</p>
                <p>Seules les routes de base sont disponibles.</p>
            </div>
            
            <div class="endpoints">
                <h3>Endpoints disponibles:</h3>
                <ul>
                    <li><a href="/health">/health</a> - V√©rification de l'√©tat du serveur</li>
                    <li><a href="/docs">/docs</a> - Documentation API</li>
                </ul>
            </div>
        </body>
    </html>
    \"\"\"
    return HTMLResponse(content=html_content)

# Gestionnaire d'exceptions global
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    \"\"\"
    Gestionnaire d'exceptions global pour l'application.
    \"\"\"
    logger.error(f"Exception non g√©r√©e: {exc}", exc_info=True)
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={"detail": "Une erreur interne est survenue"}
    )

# Ajouter quelques routes de test pour les services principaux
@app.get("/api/tts")
async def test_tts():
    return {"status": "mock", "message": "Service TTS simul√© en mode sans base de donn√©es"}

@app.get("/api/stt")
async def test_stt():
    return {"status": "mock", "message": "Service STT simul√© en mode sans base de donn√©es"}

@app.get("/coaching/init")
async def test_coaching_init():
    return {"status": "mock", "session_id": "test-session-123", "message": "Session de coaching simul√©e en mode sans base de donn√©es"}

@app.get("/api/session/start")
async def test_session_start():
    return {"status": "mock", "session_id": "test-session-123", "message": "Session simul√©e en mode sans base de donn√©es"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8082,
        reload=True
    )
"""
    
    # Sauvegarder l'original
    backup_path = MAIN_PY_PATH + ".backup"
    if not os.path.exists(backup_path):
        with open(MAIN_PY_PATH, 'r') as src:
            with open(backup_path, 'w') as dst:
                dst.write(src.read())
        print(f"‚úÖ Sauvegarde de l'original cr√©√©e: {backup_path}")
    
    # √âcrire le fichier simplifi√©
    with open(MAIN_PY_PATH, 'w') as file:
        file.write(simplified_main)
    
    print("‚úÖ Fichier main.py simplifi√© cr√©√© avec succ√®s.")
    return True

if __name__ == "__main__":
    # fix_main_imports()  # Approche 1: Modifier les imports
    create_simplified_main()  # Approche 2: Remplacer compl√®tement le fichier
    print("üîÑ Red√©marrez le service pour appliquer les modifications.")
