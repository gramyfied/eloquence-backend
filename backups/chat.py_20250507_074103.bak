from fastapi import APIRouter, Depends, HTTPException, Query, Request
from typing import Optional
from ..schemas import ChatMessage, ChatResponse
from ...core.orchestrator import Orchestrator
from ...core.auth import get_current_user, User
from ...core.config import settings
import uuid
import logging

router = APIRouter(prefix="/chat", tags=["chat"])
logger = logging.getLogger(__name__)

@router.get("/")
@router.post("/")
async def chat(
    request: Request,
    message: str = Query(..., description="Message de l'utilisateur"),
    session_id: Optional[str] = Query(None, description="ID de la session (optionnel)"),
    user_id: Optional[str] = Query(None, description="ID de l'utilisateur (optionnel)"),
    current_user: User = Depends(get_current_user) if not settings.disable_auth else None
):
    orchestrator = request.app.state.orchestrator
    try:
        # Mode simulé si pas de base de données
        if not orchestrator.db_available:
            return {
                "status": "mock",
                "message": message,
                "response": "Ceci est une réponse simulée pour le test.",
                "session_id": session_id if session_id else f"mock-session-{int(uuid.uuid4().time)}",
                "user_id": user_id if user_id else "anonymous"
            }
        
        # Traiter le message
        response = await orchestrator.process_chat_message(message, session_id, user_id)
        return {
            "status": "success",
            "message": message,
            "response": response.text,
            "session_id": response.session_id,
            "user_id": response.user_id
        }
    except Exception as e:
        logger.error(f"Erreur lors du traitement du message chat: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du traitement: {str(e)}")
